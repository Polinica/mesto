(()=>{"use strict";var e=".popup__form",t=document.querySelector(".profile__avatar-image"),r=document.querySelector(".profile__name"),n=document.querySelector(".profile__job"),o=document.querySelector(".profile__button_type_edit"),i=".popup_type_edit-profile",u=document.querySelector(i),a=u.querySelector(".popup__input_type_name"),c=u.querySelector(".popup__input_type_job"),l=document.querySelector(".profile__avatar-button"),s=".popup_type_add-card",f=document.querySelector(s),p=document.querySelector(".profile__button_type_add"),y=f.querySelector(e),h={baseUrl:"https://mesto.nomoreparties.co/v1/".concat("cohort-65"),headers:{authorization:"e15cec99-d6b9-42d3-8bac-fea59fe72095","Content-Type":"application/json"}};function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==d(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==d(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===d(o)?o:String(o)),n)}var o}var m=function(){function e(t,r,n,o,i,u){var a=t.name,c=t.link,l=t.likes,s=t.owner,f=t.createdAt,p=t._id;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=a,this._link=c,this._likes=l,this._templateSelector=r,this._handleCardClick=n,this._handleDeleteCard=o,this._handleLikeCard=i,this._owner=s,this._createdAt=f,this._id=p,this._userId=u,this._isLiked=this._checkIsLiked()}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){this._element=this._getTemplate(),this._buttonLike=this._element.querySelector(".card__like-button");var e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this.setLikes(),this._owner._id!==this._userId&&this._element.querySelector(".card__delete-button").remove(),this._setEventlisteners(),this._element}},{key:"_setEventlisteners",value:function(){var e=this;this._element.querySelector(".card__like-button").addEventListener("click",(function(t){return e._likeCard(t)})),this._element.querySelector(".card__image").addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)})),this._element.querySelector(".card__delete-button")&&this._element.querySelector(".card__delete-button").addEventListener("click",(function(){return e._handleDelete()}))}},{key:"_likeCard",value:function(e){e.target.disabled=!0,this._handleLikeCard(this._id,this._isLiked).then((function(){e.target.disabled=!1}))}},{key:"_handleDelete",value:function(){this._handleDeleteCard(this._id)}},{key:"_checkIsLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"setLikes",value:function(e){var t=this._element.querySelector(".card__like-count"),r=this._element.querySelector(".card__like-button");e&&(this._likes=e,this._isLiked=this._checkIsLiked()),t.textContent=this._likes.length,this._isLiked?r.classList.add("card__like-button_active"):r.classList.remove("card__like-button_active")}},{key:"delete",value:function(){this._element.remove(),this._element=null}}])&&v(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==_(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==_(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===_(o)?o:String(o)),n)}var o}var S=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=r,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._inputElements.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))})),this._toggleButtonState()}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var r=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this._enableButtonState()}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_hasInvalidInput",value:function(){return this._inputElements.some((function(e){return!1===e.validity.valid}))}}])&&b(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function k(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==g(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===g(o)?o:String(o)),n)}var o}var w=function(){function e(t,r){var n=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=n,this._renderer=o,this._container=document.querySelector(r)}var t,r;return t=e,r=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){var r=e._renderer(t);e.addItem(r)}))}},{key:"addItem",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.prepend(e):this._container.append(e)}}],r&&k(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function j(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==E(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==E(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===E(o)?o:String(o)),n)}var o}var O=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,r;return t=e,(r=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){t.target===t.currentTarget&&e.close()})),this._popupCloseButton=this._popup.querySelector(".popup__cancel-button"),this._popupCloseButton.addEventListener("click",(function(){e.close()}))}}])&&j(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function P(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==C(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===C(o)?o:String(o)),n)}var o}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},L.apply(this,arguments)}function T(e,t){return T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},T(e,t)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&T(e,t)}(u,e);var t,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(n);if(o){var r=q(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._figureElement=t._popup.querySelector(".popup__image"),t._captionElement=t._popup.querySelector(".popup__image-caption"),t}return t=u,(r=[{key:"open",value:function(e,t){this._figureElement.src=e,this._figureElement.alt=t,this._captionElement.textContent=t,L(q(u.prototype),"open",this).call(this)}}])&&P(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(O);function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function B(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==R(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==R(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===R(o)?o:String(o)),n)}var o}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},U.apply(this,arguments)}function x(e,t){return x=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},x(e,t)}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&x(e,t)}(u,e);var t,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(n);if(o){var r=A(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,e))._handleSubmit=t,r._form=r._popup.querySelector(".popup__form"),r._inputList=r._form.querySelectorAll(".popup__input"),r}return t=u,(r=[{key:"_getInputValues",value:function(){var e=this;return this._inputValues={},this._inputList.forEach((function(t){e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){e[t.name]&&(t.value=e[t.name])}))}},{key:"setEventListeners",value:function(){var e=this;U(A(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submit()}))}},{key:"_submit",value:function(){var e=this._form.querySelector(".popup__save-button"),t=e.textContent;e.disabled=!0,e.textContent="Сохранение...",this._handleSubmit(this._getInputValues()).then((function(){e.textContent=t,e.disabled=!1}))}},{key:"close",value:function(){U(A(u.prototype),"close",this).call(this),this._form.reset()}}])&&B(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(O);function V(e){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},V(e)}function N(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==V(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==V(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===V(o)?o:String(o)),n)}var o}function J(){return J="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=H(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},J.apply(this,arguments)}function G(e,t){return G=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},G(e,t)}function H(e){return H=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},H(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&G(e,t)}(u,e);var t,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=H(n);if(o){var r=H(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===V(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,e))._handleSubmit=t,r._button=r._popup.querySelector(".popup__save-button"),r}return t=u,(r=[{key:"setEventListeners",value:function(){var e=this;J(H(u.prototype),"setEventListeners",this).call(this),this._button.addEventListener("click",(function(){e._handleSubmit(e._target)}))}},{key:"setTarget",value:function(e){this._target=e}}])&&N(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(O);function M(e){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M(e)}function F(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==M(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==M(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===M(o)?o:String(o)),n)}var o}var K=function(){function e(t){var r=t.nameElement,n=t.jobElement,o=t.avatarElement;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=r,this._jobElement=n,this._avatarElement=o}var t,r;return t=e,(r=[{key:"getUserInfo",value:function(){return{name:this._name,job:this._job}}},{key:"fill",value:function(e){var t=e.name,r=e.about,n=e.avatar,o=e.cohort,i=e._id;this._name=t,this._job=r,this._avatar=n,this._cohort=o,this.id=i}},{key:"renderName",value:function(){this._nameElement.textContent=this._name}},{key:"renderJob",value:function(){this._jobElement.textContent=this._job}},{key:"renderAvatar",value:function(){this._avatarElement.src=this._avatar}}])&&F(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Q(e){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Q(e)}function W(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==Q(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Q(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===Q(o)?o:String(o)),n)}var o}var X={},Y={};function Z(e){var t=new m(e,"#card",$,ee,te,ne.id);return Y[e._id]=t,t.generateCard()}function $(e,t){ce.open(e,t)}function ee(e){se.setTarget(e),se.open()}function te(e,t){return re.toggleLike(e,t).then((function(t){Y[e].setLikes(t)}))}var re=new(function(){function e(t){var r=t.baseUrl,n=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=r,this._headers=n}var t,r;return t=e,(r=[{key:"getUserInfo",value:function(){var e=this._baseUrl+"/users/me";return fetch(e,{method:"GET",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't get user info from the server")})).catch((function(e){return console.error(e)}))}},{key:"setUserInfo",value:function(e){var t=e.name,r=e.job,n=this._baseUrl+"/users/me";return fetch(n,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send user info to the server")})).catch((function(e){return console.error(e)}))}},{key:"changeAvatar",value:function(e){var t=this._baseUrl+"/users/me/avatar";return fetch(t,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send avatar to the server")})).catch((function(e){return console.error(e)}))}},{key:"getInitialCards",value:function(){var e=this._baseUrl+"/cards";return fetch(e,{method:"GET",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't get initial cards from the server")})).catch((function(e){return console.error(e)}))}},{key:"addNewCard",value:function(e){var t=e.name,r=e.link,n=this._baseUrl+"/cards";return fetch(n,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send new card to the server")})).catch((function(e){return console.error(e)}))}},{key:"deleteCard",value:function(e){var t=this._baseUrl+"/cards/".concat(e);return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){if(e.ok)return Promise.resolve();throw new Error("Can't delete card from the server")})).catch((function(e){return console.error(e)}))}},{key:"_setLike",value:function(e){var t=this._baseUrl+"/cards/".concat(e,"/likes");return fetch(t,{method:"PUT",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send like to the server")})).then((function(e){return e.likes})).catch((function(e){return console.error(e)}))}},{key:"_deleteLike",value:function(e){var t=this._baseUrl+"/cards/".concat(e,"/likes");return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't delete like from the server")})).then((function(e){return e.likes})).catch((function(e){return console.error(e)}))}},{key:"toggleLike",value:function(e,t){return t?this._deleteLike(e):this._setLike(e)}}])&&W(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}())(h),ne=new K({nameElement:r,jobElement:n,avatarElement:t});re.getUserInfo().then((function(e){ne.fill(e),ne.renderName(),ne.renderJob(),ne.renderAvatar()}));var oe=new w({items:[],renderer:Z},".cards");re.getInitialCards().then((function(e){e.forEach((function(e){var t=Z(e);oe.addItem(t)}))}));var ie=new D(i,(function(e){return re.setUserInfo(e).then((function(e){ne.fill(e),ne.renderName(),ne.renderJob(),ie.close()}))})),ue=new D(".popup_type_change-avatar",(function(e){return re.changeAvatar(e.link).then((function(e){ne.fill(e),ne.renderAvatar(),ue.close()}))}));ue.setEventListeners();var ae=new D(s,(function(e){return re.addNewCard(e).then((function(e){oe.addItem(Z(e),!0),ae.close(),X[y.getAttribute("name")].disableButtonState()}))})),ce=new I(".popup_type_image");ie.setEventListeners();var le,se=new z(".popup_type_confirm",(function(e){re.deleteCard(e).then((function(){Y[e].delete(),se.close()})).catch((function(e){return console.error(e)}))}));se.setEventListeners(),o.addEventListener("click",(function(){var e=ne.getUserInfo();a.value=e.name,c.value=e.job,ie.setInputValues(ne.getUserInfo()),ie.open()})),l.addEventListener("click",(function(){ue.open()})),ae.setEventListeners(),p.addEventListener("click",(function(){ae.open()})),ce.setEventListeners(),le={formSelector:e,inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},Array.from(document.querySelectorAll(le.formSelector)).forEach((function(e){var t=new S(le,e);X[e.getAttribute("name")]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,